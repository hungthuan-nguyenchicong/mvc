// backend/server.js
import { serve, file } from "bun";
import path from "path"; // Ensure 'path' module is imported for path.join

// üåü X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n m·ªôt c√°ch ƒë·ªông.
// ƒêi·ªÅu n√†y gi·∫£ ƒë·ªãnh b·∫°n lu√¥n ch·∫°y l·ªánh 'bun run dev' t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.
const PROJECT_ROOT = process.cwd();

// X√°c ƒë·ªãnh th∆∞ m·ª•c ch·ª©a c√°c file frontend ƒë√£ ƒë∆∞·ª£c build.
// Th∆∞ m·ª•c n√†y ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng khi server ch·∫°y ·ªü ch·∫ø ƒë·ªô production.
const FRONTEND_BUILD_DIR = path.join(PROJECT_ROOT, 'frontend', 'dist');

// üåü Quan tr·ªçng: X√°c ƒë·ªãnh bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ bi·∫øt server ƒëang ·ªü ch·∫ø ƒë·ªô n√†o.
// 'process.env.NODE_ENV' s·∫Ω l√† 'production' n·∫øu b·∫°n ch·∫°y 'NODE_ENV=production bun run start'.
// N·∫øu kh√¥ng ƒë∆∞·ª£c set, n√≥ s·∫Ω l√† 'undefined' ho·∫∑c 'development' theo quy ∆∞·ªõc.
const IS_PRODUCTION = process.env.NODE_ENV === 'production';

console.log(`D·ª± √°n ƒëang ch·∫°y t·ª´ g·ªëc: ${PROJECT_ROOT}`);
console.log(`M√¥i tr∆∞·ªùng: ${IS_PRODUCTION ? 'Production' : 'Development'}`);
if (IS_PRODUCTION) {
    console.log(`Ph·ª•c v·ª• frontend t·ª´: ${FRONTEND_BUILD_DIR}`);
}

const server = serve({
  port: process.env.PORT || 3000, // S·ª≠ d·ª•ng PORT t·ª´ .env ho·∫∑c m·∫∑c ƒë·ªãnh 3000
  fetch(req) {
    const url = new URL(req.url);
    const pathname = url.pathname;
    const requestOrigin = req.headers.get('Origin'); // L·∫•y Origin t·ª´ request c·ªßa tr√¨nh duy·ªát

    // C√°c origins ƒë∆∞·ª£c ph√©p trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (dev)
    const ALLOWED_DEV_ORIGINS = [
        process.env.FRONTEND_URL || "http://localhost:5173", // L·∫•y t·ª´ .env, ho·∫∑c m·∫∑c ƒë·ªãnh
        "http://localhost:5173" // Lu√¥n cho ph√©p localhost
    ];

    let corsOriginHeader = '';
    // Logic x√°c ƒë·ªãnh header Access-Control-Allow-Origin d·ª±a tr√™n m√¥i tr∆∞·ªùng
    if (IS_PRODUCTION) {
        // Trong production, ch·ªâ cho ph√©p origin c·ªßa ch√≠nh server ho·∫∑c m·ªôt domain c·ª• th·ªÉ
        corsOriginHeader = url.origin; // Cho ph√©p c√πng origin
        // Ho·∫∑c b·∫°n c√≥ th·ªÉ ch·ªâ ƒë·ªãnh m·ªôt domain c·ª• th·ªÉ:
        // corsOriginHeader = "https://your-production-frontend-domain.com";
    } else {
        // Trong ph√°t tri·ªÉn (dev), ki·ªÉm tra origin c·ªßa request
        if (requestOrigin && ALLOWED_DEV_ORIGINS.includes(requestOrigin)) {
            // N·∫øu origin c·ªßa request h·ª£p l·ªá, tr·∫£ l·∫°i ch√≠nh origin ƒë√≥
            corsOriginHeader = requestOrigin;
        } else {
            // N·∫øu kh√¥ng, m·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ m·ªôt trong c√°c dev origins ƒë√£ ƒë·ªãnh nghƒ©a
            // ƒêi·ªÅu n√†y gi√∫p tr√°nh l·ªói n·∫øu tr√¨nh duy·ªát t·ª± ƒë·ªông chuy·ªÉn t·ª´ localhost sang 127.0.0.1
            corsOriginHeader = ALLOWED_DEV_ORIGINS[0]; 
        }
    }

    // üåü LOGIC PH·ª§C V·ª§ C√ÅC FILE FRONTEND ƒê√É BUILD TRONG PRODUCTION üåü
    // Ph·∫ßn n√†y ch·ªâ ho·∫°t ƒë·ªông khi IS_PRODUCTION l√† true.
    // Trong m√¥i tr∆∞·ªùng dev, Vite Dev Server s·∫Ω ph·ª•c v·ª• frontend.
    if (IS_PRODUCTION) {
        const filePath = path.join(FRONTEND_BUILD_DIR, pathname === '/' ? 'index.html' : pathname);
        
        const requestedFile = Bun.file(filePath);
        if (requestedFile.exists()) {
            console.log(`Serving static file: ${filePath}`);
            return new Response(requestedFile);
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y file v√† kh√¥ng ph·∫£i l√† m·ªôt request API, 
        // gi·∫£ ƒë·ªãnh ƒë√¢y l√† m·ªôt ·ª©ng d·ª•ng SPA v√† tr·∫£ v·ªÅ index.html ƒë·ªÉ router c·ªßa frontend x·ª≠ l√Ω.
        if (!pathname.startsWith('/api/') && !pathname.includes('.')) { 
            const indexHtmlPath = path.join(FRONTEND_BUILD_DIR, 'index.html');
            if (Bun.file(indexHtmlPath).exists()) {
                console.log(`Serving index.html for SPA route: ${pathname}`);
                return new Response(file(indexHtmlPath));
            }
        }
    }

    // üåü LOGIC X·ª¨ L√ù C√ÅC ƒêI·ªÇM K·∫æT N·ªêI API BACKEND üåü
    if (pathname === "/api/hello" && req.method === "GET") {
      console.log("Received request for /api/hello from origin:", requestOrigin);
      return new Response(JSON.stringify({ message: "Hello from Bun Backend!" }), {
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": corsOriginHeader, // S·ª≠ d·ª•ng Origin ƒë√£ x√°c ƒë·ªãnh
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type"
        },
      });
    }

    // X·ª≠ l√Ω c√°c request OPTIONS (Preflight requests) cho CORS
    if (req.method === "OPTIONS") {
        return new Response(null, {
            status: 204, // "No Content" - b√°o hi·ªáu th√†nh c√¥ng cho preflight
            headers: {
                "Access-Control-Allow-Origin": corsOriginHeader,
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Max-Age": "86400" // Cache preflight response trong 24 gi·ªù
            }
        });
    }

    // Tr·∫£ v·ªÅ 404 Not Found n·∫øu kh√¥ng c√≥ route n√†o kh·ªõp
    return new Response("404 Not Found", { status: 404 });
  },
  error(error) {
    // X·ª≠ l√Ω l·ªói server v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi 500
    console.error("Bun server error:", error);
    return new Response("Internal Server Error", { status: 500 });
  }
});

console.log(`üöÄ Bun server running on http://localhost:${server.port}`);
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Set the root directory for your application.
    # This should be the 'public' directory of your MVC structure,
    # where your main index.php (for backend) and index.html (for frontend SPA) reside.
    root /var/www/html/mvc/public;

    # Set default index files.
    # index.html should be listed first if your SPA is the primary entry point
    # for the root path (/).
    index index.html index.php index.htm;

    # Ensure all files served from this server have UTF-8 charset
    charset utf-8;

    # This catches requests for your admin SPA.
    # Your JavaScript router handles paths like /admin/login/, /admin/dashboard/, etc.
    #
    # try_files $uri $uri/ /admin/index.html;
    # Explanation:
    # 1. $uri: Tries to find a file exactly matching the URI (e.g., /admin/some_static_file.css).
    # 2. $uri/: Tries to find a directory matching the URI (e.g., /admin/css/).
    # 3. /admin/index.html: If neither a file nor a directory is found, it serves /admin/index.html.
    #    This is the crucial part for your SPA, as the JS router will then read the actual
    #    URI from the browser (e.g., /admin/login/) and render the correct component.
    #
    # Given your PHP router also has /admin/ and /admin/login/, and your JavaScript router
    # seems to expect a base path for the SPA, let's refine this based on the common pattern.
    #
    # If /admin/ routes are *primarily* handled by your JS SPA, and the PHP backend
    # only serves specific API endpoints or initial page loads, then the `try_files`
    # for `index.html` is correct for the SPA.
    #
    # Based on your PHP router only handling `/admin/` and `/admin/login/`, it seems
    # the PHP backend handles those specific paths directly.
    # Your JS router handles `/admin/` and then uses a regex for paths within `/admin/`.
    #
    # Let's assume:
    # - Requests to `/admin/` and `/admin/login/` (and potentially other specific ones
    #   your PHP router defines) should go to PHP.
    # - Other routes under `/admin/` (e.g., `/admin/dashboard`, `/admin/users/1`)
    #   should be handled by the JavaScript SPA.
    # - Static assets under `/admin/` (e.g., `/admin/css/style.css`) should be served directly.

    # Option 1: Prioritize PHP for specific admin routes, then fallback to SPA
    # This is more complex but accurately reflects if specific /admin paths are PHP-only.
    # location = /admin/ {
    #     # Exact match for /admin/, often directs to the PHP entry point for initial load
    #     try_files $uri $uri/ /index.php?$query_string;
    # }

    # # location = /admin/login/ {
    # #     # Exact match for /admin/login/, directed to PHP for backend login logic
    # #     try_files $uri $uri/ /admin/index.php?$query_string;
    # # }

    location /admin/views/ {
        # Ensure your root is correctly set for this SPA, if different from the server's root
        # root /path/to/your/admin_views_spa_build; # Uncomment if this SPA has a dedicated root
        try_files $uri $uri/ /admin/views/index.html;
    }

    # # For other paths under /admin/, assume it's the SPA
    location /admin/ {
        # Serve static files directly if they exist
        # If not, fallback to /admin/index.html which is your SPA entry point for admin
        try_files $uri $uri/ /admin/index.php?$query_string;
    }


    # General location block for the root of your domain.
    # This assumes your main site (not admin) is a static site or a different SPA.
    location / {
        # Try to serve the requested URI as a file, then as a directory.
        # If neither is found, fall back to /index.html (your main SPA entry point).
        try_files $uri $uri/ /index.php?$query_string; #/admin/index.php?$query_string /admin/views/index.html?$query_string;
    }
	

    # Serve static files directly with caching headers
    # This should be above the PHP location block to ensure static files are not processed by PHP-FPM.
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|eot|ttf|woff|woff2)$ {
        expires 30d; # Cache static assets for better performance
        add_header Cache-Control "public, no-transform";
        try_files $uri =404; # Ensure file exists, otherwise 404
        # Important: No `fastcgi_pass` here
    }

	# --- Ưu tiên xử lý các file PHP trong admin trước ---
    # location ~ /admin/\.php$ {
    #     # Đảm bảo đường dẫn này đúng cho admin PHP-FPM nếu bạn dùng socket riêng
    #     fastcgi_pass unix:/run/php/php8.3-fpm-admin.sock; # Ví dụ socket riêng
    #     fastcgi_index index.php;
    #     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #     fastcgi_param REQUEST_URI $request_uri;
    #     include fastcgi_params;
    #     # Các cài đặt riêng cho admin PHP-FPM
    #     #fastcgi_read_timeout 600s; # Ví dụ: timeout dài hơn cho admin
    # }

    # Pass all .php files to PHP-FPM
    location ~ \.php$ {
        # Adjust this to your PHP-FPM socket or IP:PORT
        fastcgi_pass unix:/run/php/php8.3-fpm.sock;
        fastcgi_index index.php;
        fastcgi_split_path_info ^(.+\.php)(/.+)$; # add them
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # Pass the original URI to PHP so your PHP router can use $_SERVER['REQUEST_URI']
        fastcgi_param REQUEST_URI $request_uri;
        include fastcgi_params;

        # Optional: Add buffer settings if you experience issues with large responses
        # fastcgi_buffers 16 16k;
        # fastcgi_buffer_size 32k;
        # fastcgi_read_timeout 300;
    }

    # Deny access to hidden files (e.g., .htaccess, .env)
    location ~ /\. {
        deny all;
    }

    # Deny access to sensitive files (e.g., composer.json, .git)
    location ~* /(composer\.(json|lock)|\.git|CHANGELOG|Makefile|README\.md|schema\.sql|tests?|bin|vendor)/ {
        deny all;
    }

    # Error pages (optional)
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    # SSL configuration (uncomment and configure if using HTTPS)
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    # include snippets/snakeoil.conf; # Or your actual SSL certs
    # ssl_certificate /etc/nginx/ssl/your_domain.crt;
    # ssl_certificate_key /etc/nginx/ssl/your_domain.key;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    # ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
    # ssl_prefer_server_ciphers on;
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # add_header X-Frame-Options "SAMEORIGIN";
    # add_header X-Content-Type-Options "nosniff";
    # add_header X-XSS-Protection "1; mode=block";
}